import streamlit as st
from supabase import create_client
import bcrypt
from ..utils.validators import UserValidator
from ..utils.error_handler import (
    handle_error, safe_database_operation, show_success_message, 
    show_error_message, error_boundary, DatabaseError, ValidationError
)

# --- K·∫øt n·ªëi Supabase ---
SUPABASE_URL = "https://skbclvpercuqtyevuxqr.supabase.co"
SUPABASE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNrYmNsdnBlcmN1cXR5ZXZ1eHFyIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDk4NzMwNDIsImV4cCI6MjA2NTQ0OTA0Mn0.DTBbMCVSHZKjXkEzLDjmbYgYGR42NEYozcr3BvNN7x0"
supabase = create_client(SUPABASE_URL, SUPABASE_KEY)

@error_boundary("Database connection", show_user=True)
def get_supabase_client():
    """L·∫•y Supabase client v·ªõi error handling"""
    try:
        return create_client(SUPABASE_URL, SUPABASE_KEY)
    except Exception as e:
        raise DatabaseError("Kh√¥ng th·ªÉ k·∫øt n·ªëi database", "db_connection_failed")

@error_boundary("User authentication", show_user=True)
def authenticate_user(username: str, password: str):
    """X√°c th·ª±c user v·ªõi validation v√† error handling"""
    # Validate inputs
    is_valid_username, username_error = UserValidator.validate_username(username)
    if not is_valid_username:
        raise ValidationError(username_error, "invalid_username")
    
    is_valid_password, password_error = UserValidator.validate_password(password)
    if not is_valid_password:
        raise ValidationError(password_error, "invalid_password")
    
    # Database operation
    def db_operation():
        result = supabase.table("user").select("*").eq("username", username.strip()).execute()
        return result
    
    result = safe_database_operation(db_operation)
    
    if result and result.data:
        user = result.data[0]
        if bcrypt.checkpw(password.encode(), user["password_hash"].encode()):
            return True, user, None
        else:
            return False, None, "Sai m·∫≠t kh·∫©u"
    else:
        return False, None, "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng"

@error_boundary("User registration", show_user=True)
def register_user(username: str, email: str, password: str, confirm_password: str):
    """ƒêƒÉng k√Ω user m·ªõi v·ªõi validation"""
    # Validate all inputs
    validation_results = {
        'username': UserValidator.validate_username(username),
        'email': UserValidator.validate_email(email),
        'password': UserValidator.validate_password(password)
    }
    
    # Check validation results
    for field, (is_valid, error_msg) in validation_results.items():
        if not is_valid:
            raise ValidationError(f"{field.title()}: {error_msg}", f"invalid_{field}")
    
    # Check password confirmation
    if password != confirm_password:
        raise ValidationError("M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp", "password_mismatch")
    
    # Check if email exists
    def check_email_exists():
        return supabase.table("user").select("*").eq("email", email.strip()).execute()
    
    existing_user = safe_database_operation(check_email_exists)
    if existing_user and existing_user.data:
        raise ValidationError("Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng", "email_exists")
    
    # Check if username exists
    def check_username_exists():
        return supabase.table("user").select("*").eq("username", username.strip()).execute()
    
    existing_username = safe_database_operation(check_username_exists)
    if existing_username and existing_username.data:
        raise ValidationError("Username ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng", "username_exists")
    
    # Create new user
    def create_user():
        hashed_password = bcrypt.hashpw(password.encode(), bcrypt.gensalt()).decode()
        return supabase.table("user").insert({
            "username": username.strip(),
            "email": email.strip(),
            "password_hash": hashed_password
        }).execute()
    
    result = safe_database_operation(create_user)
    return result is not None

def main():
    if "user_id" not in st.session_state:
        st.session_state.user_id = None

    # --- Header v·ªõi Study Buddy ---
    st.markdown("""
    <div style="text-align: center; margin-bottom: 2rem;">
        <h1 style="color: #007bff; font-size: 3rem; margin-bottom: 0.5rem;">
            üí¨ Study Buddy
        </h1>
        <p style="color: #6c757d; font-size: 1.2rem; margin-bottom: 2rem;">
            AI Learning Assistant - Tr·ª£ l√Ω h·ªçc t·∫≠p th√¥ng minh
        </p>
    </div>
    """, unsafe_allow_html=True)

    # --- Giao di·ªán login ---
    st.title("üîê ƒêƒÉng nh·∫≠p / ƒêƒÉng k√Ω")

    tab1, tab2 = st.tabs(["ƒêƒÉng nh·∫≠p", "ƒêƒÉng k√Ω"])

    with tab1:
        with st.form("login_form"):
            username = st.text_input("T√™n ng∆∞·ªùi d√πng", placeholder="Nh·∫≠p username (3-20 k√Ω t·ª±)")
            password = st.text_input("M·∫≠t kh·∫©u", type="password", placeholder="Nh·∫≠p m·∫≠t kh·∫©u")
            submit_login = st.form_submit_button("üîê ƒêƒÉng nh·∫≠p", use_container_width=True)
            
            if submit_login:
                if not username or not password:
                    show_error_message('authentication_required')
                    return
                
                try:
                    success, user, error_msg = authenticate_user(username, password)
                    if success:
                        show_success_message('login_success')
                        st.session_state.authenticated = True
                        st.session_state.user_id = user["id"]
                        st.rerun()
                    else:
                        st.error(f"‚ùå {error_msg}")
                except (ValidationError, DatabaseError) as e:
                    # Error ƒë√£ ƒë∆∞·ª£c handle trong decorator
                    pass
                except Exception as e:
                    handle_error(e, "Login process", show_user=True)

    with tab2:
        st.markdown("### T·∫°o t√†i kho·∫£n m·ªõi")
        
        with st.form("register_form"):
            col1, col2 = st.columns(2)
            
            with col1:
                username = st.text_input(
                    "T√™n ng∆∞·ªùi d√πng *", 
                    placeholder="3-20 k√Ω t·ª±, ch·ªØ c√°i v√† s·ªë",
                    help="Username ch·ªâ ƒë∆∞·ª£c ch·ª©a ch·ªØ c√°i, s·ªë v√† d·∫•u g·∫°ch d∆∞·ªõi"
                )
                email_reg = st.text_input(
                    "Email *", 
                    placeholder="example@email.com",
                    help="Email h·ª£p l·ªá ƒë·ªÉ x√°c nh·∫≠n t√†i kho·∫£n"
                )
            
            with col2:
                password_reg = st.text_input(
                    "M·∫≠t kh·∫©u *", 
                    type="password",
                    placeholder="√çt nh·∫•t 6 k√Ω t·ª±",
                    help="M·∫≠t kh·∫©u m·∫°nh ƒë·ªÉ b·∫£o v·ªá t√†i kho·∫£n"
                )
                confirm_password = st.text_input(
                    "X√°c nh·∫≠n m·∫≠t kh·∫©u *", 
                    type="password",
                    placeholder="Nh·∫≠p l·∫°i m·∫≠t kh·∫©u",
                    help="Ph·∫£i tr√πng kh·ªõp v·ªõi m·∫≠t kh·∫©u ·ªü tr√™n"
                )
            
            # Real-time validation feedback
            if username:
                is_valid_username, username_error = UserValidator.validate_username(username)
                if not is_valid_username:
                    st.error(f"‚ùå Username: {username_error}")
                else:
                    st.success("‚úÖ Username h·ª£p l·ªá")
            
            if email_reg:
                is_valid_email, email_error = UserValidator.validate_email(email_reg)
                if not is_valid_email:
                    st.error(f"‚ùå Email: {email_error}")
                else:
                    st.success("‚úÖ Email h·ª£p l·ªá")
            
            if password_reg:
                is_valid_password, password_error = UserValidator.validate_password(password_reg)
                if not is_valid_password:
                    st.error(f"‚ùå M·∫≠t kh·∫©u: {password_error}")
                else:
                    st.success("‚úÖ M·∫≠t kh·∫©u h·ª£p l·ªá")
            
            if password_reg and confirm_password:
                if password_reg != confirm_password:
                    st.error("‚ùå M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp")
                else:
                    st.success("‚úÖ M·∫≠t kh·∫©u x√°c nh·∫≠n kh·ªõp")
            
            st.markdown("---")
            submit_register = st.form_submit_button("‚ú® T·∫°o t√†i kho·∫£n", use_container_width=True)
            
            if submit_register:
                if not all([username, email_reg, password_reg, confirm_password]):
                    st.error("‚ùå Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß t·∫•t c·∫£ th√¥ng tin b·∫Øt bu·ªôc (*)")
                    return
                
                try:
                    success = register_user(username, email_reg, password_reg, confirm_password)
                    if success:
                        show_success_message('account_created')
                        st.info("üëÜ B√¢y gi·ªù b·∫°n c√≥ th·ªÉ ƒëƒÉng nh·∫≠p b·∫±ng t√†i kho·∫£n v·ª´a t·∫°o!")
                        st.balloons()  # Celebration effect
                except (ValidationError, DatabaseError) as e:
                    # Error ƒë√£ ƒë∆∞·ª£c handle trong decorator
                    pass
                except Exception as e:
                    handle_error(e, "Registration process", show_user=True)
