import streamlit as st
from datetime import datetime

def render_message(message):
    """Render m·ªôt tin nh·∫Øn chat v·ªõi style gi·ªëng ChatGPT"""
    role = message["role"]
    content = message["content"]
    timestamp = message.get("timestamp", datetime.now())
    
    if role == "user":
        # Tin nh·∫Øn c·ªßa user - cƒÉn ph·∫£i
        with st.chat_message("user", avatar="üë§"):
            st.markdown(content)
            st.caption(f"üïê {timestamp.strftime('%H:%M')}")
    
    elif role == "assistant":
        # Tin nh·∫Øn c·ªßa AI - cƒÉn tr√°i
        with st.chat_message("assistant", avatar="ü§ñ"):
            st.markdown(content)
            st.caption(f"üïê {timestamp.strftime('%H:%M')}")

def render_sidebar():
    """Render sidebar v·ªõi th√¥ng tin v√† ƒëi·ªÅu khi·ªÉn"""
    with st.sidebar:
        st.markdown("### üí¨ ChatGPT Clone")
        st.markdown("---")
        
        # Th√¥ng tin ·ª©ng d·ª•ng
        st.markdown("""
        **T√≠nh nƒÉng:**
        - üí¨ Chat v·ªõi AI
        - üìÑ Upload t√†i li·ªáu
        - üîç T√¨m ki·∫øm trong t√†i li·ªáu
        - üíæ L∆∞u l·ªãch s·ª≠ chat
        """)
        
        st.markdown("---")
        
        # H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng
        with st.expander("üìñ H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng"):
            st.markdown("""
            **C√°ch s·ª≠ d·ª•ng:**
            1. Upload t√†i li·ªáu (PDF, DOCX, TXT, MD)
            2. ƒê·∫∑t c√¢u h·ªèi ho·∫∑c chat b√¨nh th∆∞·ªùng
            3. AI s·∫Ω tr·∫£ l·ªùi d·ª±a tr√™n n·ªôi dung t√†i li·ªáu
            4. S·ª≠ d·ª•ng n√∫t "X√≥a l·ªãch s·ª≠" ƒë·ªÉ reset chat
            
            **M·∫πo:**
            - H·ªèi c·ª• th·ªÉ v·ªÅ n·ªôi dung t√†i li·ªáu
            - Y√™u c·∫ßu t√≥m t·∫Øt, ph√¢n t√≠ch
            - Chat ƒëa d·∫°ng ch·ªß ƒë·ªÅ
            """)
        
        # Th√¥ng tin phi√™n b·∫£n
        st.markdown("---")
        st.markdown("**Phi√™n b·∫£n:** 1.0.0")
        st.markdown("**C√¥ng ngh·ªá:** Streamlit + OpenAI")

def render_document_preview(doc_content, max_chars=500):
    """Hi·ªÉn th·ªã preview n·ªôi dung t√†i li·ªáu"""
    if len(doc_content) > max_chars:
        preview = doc_content[:max_chars] + "..."
    else:
        preview = doc_content
    
    st.text_area(
        "Preview n·ªôi dung:",
        value=preview,
        height=200,
        disabled=True
    )

def render_chat_stats(messages):
    """Hi·ªÉn th·ªã th·ªëng k√™ chat"""
    if not messages:
        return
    
    user_msgs = len([m for m in messages if m["role"] == "user"])
    ai_msgs = len([m for m in messages if m["role"] == "assistant"])
    
    col1, col2 = st.columns(2)
    with col1:
        st.metric("Tin nh·∫Øn c·ªßa b·∫°n", user_msgs)
    with col2:
        st.metric("Ph·∫£n h·ªìi AI", ai_msgs)

def create_download_link(messages):
    """T·∫°o link download l·ªãch s·ª≠ chat"""
    if not messages:
        return None
    
    # T·∫°o n·ªôi dung file
    content = f"# L·ªãch s·ª≠ Chat - {datetime.now().strftime('%Y%m%d_%H%M%S')}\n\n"
    
    for i, msg in enumerate(messages, 1):
        role = "üë§ B·∫°n" if msg["role"] == "user" else "ü§ñ AI"
        timestamp = msg.get("timestamp", datetime.now()).strftime('%H:%M %d/%m/%Y')
        content += f"## {i}. {role} ({timestamp})\n\n{msg['content']}\n\n---\n\n"
    
    return content

def show_upload_tips():
    """Hi·ªÉn th·ªã tips cho vi·ªác upload t√†i li·ªáu"""
    st.info("""
    üí° **M·∫πo upload t√†i li·ªáu:**
    - **PDF:** H·ªó tr·ª£ text PDF (kh√¥ng ph·∫£i ·∫£nh scan)
    - **DOCX:** File Word ƒë·ªãnh d·∫°ng .docx
    - **TXT/MD:** File text thu·∫ßn v·ªõi encoding UTF-8
    - **K√≠ch th∆∞·ªõc:** T·ªëi ƒëa 200MB m·ªói file
    """)

def render_error_message(error_msg):
    """Hi·ªÉn th·ªã th√¥ng b√°o l·ªói v·ªõi format ƒë·∫πp"""
    st.error(f"‚ùå **L·ªói:** {error_msg}")

def render_success_message(success_msg):
    """Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng"""
    st.success(f"‚úÖ **Th√†nh c√¥ng:** {success_msg}")

def render_warning_message(warning_msg):
    """Hi·ªÉn th·ªã th√¥ng b√°o c·∫£nh b√°o"""
    st.warning(f"‚ö†Ô∏è **C·∫£nh b√°o:** {warning_msg}")

def create_message_container():
    """T·∫°o container cho messages v·ªõi style t√πy ch·ªânh"""
    return st.container()

def add_custom_css():
    """Th√™m CSS t√πy ch·ªânh cho giao di·ªán"""
    st.markdown("""
    <style>
    /* Custom styles cho chat interface */
    .chat-message {
        padding: 1rem;
        border-radius: 0.5rem;
        margin: 0.5rem 0;
    }
    
    .user-message {
        background-color: #007bff;
        color: white;
        margin-left: 20%;
    }
    
    .assistant-message {
        background-color: #f1f3f4;
        color: #333;
        margin-right: 20%;
    }
    
    /* Sidebar styling */
    .sidebar .sidebar-content {
        background-color: #f8f9fa;
    }
    
    /* File uploader styling */
    .uploadedFile {
        border: 2px dashed #007bff;
        border-radius: 10px;
        padding: 20px;
        text-align: center;
    }
    
    /* Button styling */
    .stButton > button {
        border-radius: 20px;
        border: none;
        background: linear-gradient(45deg, #007bff, #0056b3);
        color: white;
    }
    
    .stButton > button:hover {
        background: linear-gradient(45deg, #0056b3, #004085);
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.2);
    }
    </style>
    """, unsafe_allow_html=True)
